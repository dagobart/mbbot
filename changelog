== most notable improvements v0.2.4 to v0.2.5
* bot now dynamically adapts its [new incoming messages] polling frequency to
  the actual demand
. on Twitter::RateLimitExceeded or Twitter::CantConnect,
  * made the bot wrapper notify the bot's supervisor once the bot receives a
    Twitter::RateLimitExceeded or Twitter::CantConnect, so they'll know about
    the issue and can look into it. (This -- to send out a message despite we
    just received a RateLimitExceeded -- is possible since that would be a
    POST. But the limitation (currently) applies only to GETs.)
  * increased the delay on Twitter::RateLimitExceeded exceptions to a quarter
    of an hour
^ improved catching up with followers so that the volume of traffic needed
  now's greatly reduced
^ greatly reduced the number of GETs performed "against" the µB service each
  [new incoming messages] poll
  . Reduced number of GETs implies reduced risk to get (temp) barred from a
    µB service for over-using it. Therefore it's beneficial to keep our
    number of GETs issued at the µB service as low as possible.
^ direct messages now can be sent out by name too (not anymore only by user's
  ID)
. as twitter gem v0.6.15 introduced another number of issues, affixed the
  required twitter gem version to either 0.4.1 (Identica) or
  0.6.12 (Twitter)
. prepared jeweler to roll mbbot a gem of its own


== most notable improvements v0.2.3 to v0.2.4

^ simplified creating new bots to the extend that only two methods of a
  +MicroBlogBot+ derived bot are needed to be overwritten: initialize() and
  act_upon_message()
^ removed the need to handle the shutdown detection within a derived bot

^ generalized MicroBlogBot.process_latest_received() to deal with any kind of
  message stream now rather than only with [inbound] replies or DMs only
+ added MicroBlogBotRunner which takes most of the former sample_chatbot.rb
  and provides its sophisticated exception handling to any bot now

* interface of MicroBlogBot.initialize() now has 5 parameters
+ added initialize_waittime() which eases to select a reasonable +waittime+
  for the service the bot gets connected to
+ added Twitter::CantConnect error handling
^ removed [spelling-error-/mismatch-prone] strings from exception handling

^ removed lots of innecessary rescue differentiations between twitter gem
  v0.4.1 and v0.6.12: issues that happen there, now may raise exceptions.
  +MicroBlogBotRunner+ does handle those exception.
^ improved lots of methods
^ simplified using the framework even more
^ made micro_blog_shadow.rb run again


== most notable improvements v0.2.2 to v0.2.3

+ added micro_blog_shadow.rb
  * as by that now are not only chat but also shadow bots possible, renamed
    sample-bot.rb to sample_chatbot.rb
^ extended micro_blog_bot.rb a little, here and there, to make it easy for
  micro_blog_shadow.rb to re-use functionality rather than [causing/keeping
  the cause a need for] replicating such functionality
  ^ added three optional parameters to initialize() which enable the
    external caller to set the start-up message of the bot, and to
    determine whether or not the bot should catch up with new/gone
    followers, or whether any messages received since the previous
    session [= the previous bot run] should be processed or not
    (= message catchup skip)
- removed the  +inbox_latest+ and +direct_latest+ paragraphs from
  config/latest_tweeds.yaml, which were actually left-overs of an
  old revision of sample-bot.rb/micro_blog_bot.rb


== most notable improvements v0.2.1 to v0.2.2

* improved message stream handling by merging in
  /branches/wrs/add_account_shadowing--0.2.0.1/
  * added patch for twitter gem v0.6.12 to enable the bot to read the public
    timeline
  + added methods to handle more kinds of message other than @replies and
    direct messages only. In total, the framework now can handle these kinds
    of message streams: +:incoming_DMs+, +:replies+, +:mentions+,
    +:own_timeline, :friends_timeline+ and +:public_timeline+.
    : This way a bot based on this here framework does not need to be a chat
      bot but can react on other messages too/alternatively.
  + added functionality to optionally skip processing any messages received
    between the previous shutdown and the current startup

* improvements and bugfixes irrelated/less relateed to the merge:
  ^ simplified and extended the code of the sample bot
  ^ bot now doesn't accidentally skip answering any incoming message(s)
    anymore
  + added a cache for outgoing post/direct messages, to enable the bot to
    avoid sending dupes
  ^ reworked say() and direct_msg() to refrain from sending out dupe
    messages
  ^ added mention of the service the bot is currently assigne to to the
    startup message, so we'll know which service to use to issue the
    +shutdown+ message
  + added a bot status logging method
    ^ sent messages now additionally get put out to the console, for
      supervision
    ^ added a newline after the 'sleeping' status message, so now distinct
      processing cycles also get visibly distinctable too
  ^ developer doesn't need to set manually +USE_IDENTICA+ anymore
  + added functionality to prepend a message-to-be-sent by the @adressee
  + moved all the functionality to cut a message to the max size allowed [for
    a message] to a single method, cut_to_tweet_length().

* interface changes/modified functionality:
  * micro_blog_messaging_io's initialize() now has +friending+ as an
    _obligatory_ parameter
  ^ get_latest_messages() returns [via the twitter gem] received messages in
    reverse order now
  ~ replaced get_latest_replies() by a completly new version
  ~ replaced get_latest_direct_msgs() by get_latest_direct_messages()
  ~ Replaced the term 'tweed' by 'message' to state we're not aimed at
    Twitter alone.
    : Flipside: now we have the term 'message' referring to message metadata
      including objects received from the twitter gem, to message hashes used
      for bot-internal processing of messages and to plain 140 (or more)
      characters text messages. This homonymy needs to be resolved.
